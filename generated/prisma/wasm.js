
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  cpf: 'cpf',
  email: 'email',
  password: 'password',
  bornDate: 'bornDate',
  avatarId: 'avatarId',
  principalAddressId: 'principalAddressId',
  cartId: 'cartId'
};

exports.Prisma.AvatarUserScalarFieldEnum = {
  id: 'id',
  url: 'url',
  publicId: 'publicId',
  userId: 'userId'
};

exports.Prisma.AddressesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  cep: 'cep',
  road: 'road',
  number: 'number',
  complement: 'complement',
  neighborhood: 'neighborhood',
  city: 'city',
  state: 'state',
  country: 'country',
  type: 'type',
  reference: 'reference'
};

exports.Prisma.UserUsedCouponsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  couponId: 'couponId',
  usedAt: 'usedAt',
  orderId: 'orderId'
};

exports.Prisma.StoresScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  cnpj: 'cnpj',
  avatarId: 'avatarId'
};

exports.Prisma.AvatarStoreScalarFieldEnum = {
  id: 'id',
  url: 'url',
  publicId: 'publicId'
};

exports.Prisma.StoreAvaliationsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  storeId: 'storeId',
  note: 'note',
  avaliationDate: 'avaliationDate',
  comment: 'comment'
};

exports.Prisma.StoreAvaliationImagesScalarFieldEnum = {
  id: 'id',
  url: 'url',
  publicId: 'publicId',
  storeAvaliationId: 'storeAvaliationId'
};

exports.Prisma.CouponsScalarFieldEnum = {
  id: 'id',
  code: 'code',
  expirationDate: 'expirationDate',
  percentageDiscount: 'percentageDiscount',
  discountValue: 'discountValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  storeId: 'storeId'
};

exports.Prisma.ProductsScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  price: 'price'
};

exports.Prisma.ProductImagesScalarFieldEnum = {
  id: 'id',
  url: 'url',
  publicId: 'publicId',
  productId: 'productId'
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  quantity: 'quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PromotionScalarFieldEnum = {
  id: 'id',
  code: 'code',
  description: 'description',
  discountType: 'discountType',
  discountValue: 'discountValue',
  startDate: 'startDate',
  endDate: 'endDate',
  storeId: 'storeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ProductAvaliationsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  note: 'note',
  avaliationDate: 'avaliationDate',
  comment: 'comment'
};

exports.Prisma.ProductAvaliationImagesScalarFieldEnum = {
  id: 'id',
  url: 'url',
  publicId: 'publicId',
  productAvaliationId: 'productAvaliationId'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id'
};

exports.Prisma.CartItemsScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  quantidade: 'quantidade',
  abandonedCartId: 'abandonedCartId'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  method: 'method'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  valor: 'valor',
  paymentDate: 'paymentDate',
  paymentMethodId: 'paymentMethodId'
};

exports.Prisma.OrderStatusScalarFieldEnum = {
  id: 'id',
  Status: 'Status'
};

exports.Prisma.OrdersScalarFieldEnum = {
  id: 'id',
  totalValue: 'totalValue',
  trackingCode: 'trackingCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sendDate: 'sendDate',
  deliveryDate: 'deliveryDate',
  minimumDeliveryForeast: 'minimumDeliveryForeast',
  maximumDeliveryForeast: 'maximumDeliveryForeast',
  usedCoupon: 'usedCoupon',
  userId: 'userId',
  orderStatusId: 'orderStatusId',
  deliveryAddressId: 'deliveryAddressId'
};

exports.Prisma.OrderHistoryScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  action: 'action',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemsScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  storeId: 'storeId',
  quantity: 'quantity',
  price: 'price'
};

exports.Prisma.ShippingScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  shippingMethod: 'shippingMethod',
  shippingCost: 'shippingCost',
  estimatedDelivery: 'estimatedDelivery',
  trackingCode: 'trackingCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  storeId: 'storeId'
};

exports.Prisma.ChatMessagesScalarFieldEnum = {
  id: 'id',
  content: 'content',
  chatId: 'chatId',
  senderUserId: 'senderUserId',
  senderStoreId: 'senderStoreId',
  receiverUserId: 'receiverUserId',
  receiverStoreId: 'receiverStoreId',
  imageId: 'imageId',
  sentAt: 'sentAt',
  receivedAt: 'receivedAt',
  wasReceived: 'wasReceived',
  readAt: 'readAt',
  wasRead: 'wasRead'
};

exports.Prisma.MessageImagesScalarFieldEnum = {
  id: 'id',
  url: 'url',
  publicId: 'publicId'
};

exports.Prisma.LoginTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token'
};

exports.Prisma.ConfirmationTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  tableName: 'tableName',
  recordId: 'recordId',
  userId: 'userId',
  timestamp: 'timestamp',
  details: 'details'
};

exports.Prisma.TwoFactorAuthScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  secret: 'secret',
  isEnabled: 'isEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AbandonedCartScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  abandonedAt: 'abandonedAt'
};

exports.Prisma.ReturnExchangeScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  reason: 'reason',
  status: 'status',
  requestedAt: 'requestedAt',
  completedAt: 'completedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  name: 'name',
  cpf: 'cpf',
  email: 'email',
  password: 'password'
};

exports.Prisma.AvatarUserOrderByRelevanceFieldEnum = {
  url: 'url',
  publicId: 'publicId'
};

exports.Prisma.AddressesOrderByRelevanceFieldEnum = {
  cep: 'cep',
  road: 'road',
  number: 'number',
  complement: 'complement',
  neighborhood: 'neighborhood',
  city: 'city',
  state: 'state',
  country: 'country',
  type: 'type',
  reference: 'reference'
};

exports.Prisma.StoresOrderByRelevanceFieldEnum = {
  name: 'name',
  cnpj: 'cnpj'
};

exports.Prisma.AvatarStoreOrderByRelevanceFieldEnum = {
  url: 'url',
  publicId: 'publicId'
};

exports.Prisma.StoreAvaliationsOrderByRelevanceFieldEnum = {
  comment: 'comment'
};

exports.Prisma.StoreAvaliationImagesOrderByRelevanceFieldEnum = {
  url: 'url',
  publicId: 'publicId'
};

exports.Prisma.CouponsOrderByRelevanceFieldEnum = {
  code: 'code'
};

exports.Prisma.ProductsOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ProductImagesOrderByRelevanceFieldEnum = {
  url: 'url',
  publicId: 'publicId'
};

exports.Prisma.PromotionOrderByRelevanceFieldEnum = {
  code: 'code',
  description: 'description',
  discountType: 'discountType'
};

exports.Prisma.CategoryOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ProductAvaliationsOrderByRelevanceFieldEnum = {
  comment: 'comment'
};

exports.Prisma.ProductAvaliationImagesOrderByRelevanceFieldEnum = {
  url: 'url',
  publicId: 'publicId'
};

exports.Prisma.OrdersOrderByRelevanceFieldEnum = {
  trackingCode: 'trackingCode'
};

exports.Prisma.OrderHistoryOrderByRelevanceFieldEnum = {
  action: 'action'
};

exports.Prisma.ShippingOrderByRelevanceFieldEnum = {
  shippingMethod: 'shippingMethod',
  trackingCode: 'trackingCode'
};

exports.Prisma.chatMessagesOrderByRelevanceFieldEnum = {
  content: 'content'
};

exports.Prisma.MessageImagesOrderByRelevanceFieldEnum = {
  url: 'url',
  publicId: 'publicId'
};

exports.Prisma.LoginTokenOrderByRelevanceFieldEnum = {
  token: 'token'
};

exports.Prisma.ConfirmationTokenOrderByRelevanceFieldEnum = {
  token: 'token'
};

exports.Prisma.LogOrderByRelevanceFieldEnum = {
  action: 'action',
  tableName: 'tableName',
  details: 'details'
};

exports.Prisma.TwoFactorAuthOrderByRelevanceFieldEnum = {
  secret: 'secret'
};

exports.Prisma.ReturnExchangeOrderByRelevanceFieldEnum = {
  reason: 'reason'
};
exports.PaymentMethodType = exports.$Enums.PaymentMethodType = {
  CREDIT_CARD: 'CREDIT_CARD',
  PIX: 'PIX',
  BOLETO: 'BOLETO',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

exports.OrderStatusType = exports.$Enums.OrderStatusType = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  RETURNED: 'RETURNED'
};

exports.ReturnExchangeStatus = exports.$Enums.ReturnExchangeStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  COMPLETED: 'COMPLETED'
};

exports.Prisma.ModelName = {
  Admin: 'Admin',
  User: 'User',
  AvatarUser: 'AvatarUser',
  Addresses: 'Addresses',
  UserUsedCoupons: 'UserUsedCoupons',
  Stores: 'Stores',
  AvatarStore: 'AvatarStore',
  StoreAvaliations: 'StoreAvaliations',
  StoreAvaliationImages: 'StoreAvaliationImages',
  Coupons: 'Coupons',
  Products: 'Products',
  ProductImages: 'ProductImages',
  Wishlist: 'Wishlist',
  Inventory: 'Inventory',
  Promotion: 'Promotion',
  Category: 'Category',
  ProductAvaliations: 'ProductAvaliations',
  ProductAvaliationImages: 'ProductAvaliationImages',
  Cart: 'Cart',
  CartItems: 'CartItems',
  PaymentMethod: 'PaymentMethod',
  Payment: 'Payment',
  OrderStatus: 'OrderStatus',
  Orders: 'Orders',
  OrderHistory: 'OrderHistory',
  OrderItems: 'OrderItems',
  Shipping: 'Shipping',
  Chat: 'Chat',
  chatMessages: 'chatMessages',
  MessageImages: 'MessageImages',
  LoginToken: 'LoginToken',
  ConfirmationToken: 'ConfirmationToken',
  Log: 'Log',
  TwoFactorAuth: 'TwoFactorAuth',
  AbandonedCart: 'AbandonedCart',
  ReturnExchange: 'ReturnExchange'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
